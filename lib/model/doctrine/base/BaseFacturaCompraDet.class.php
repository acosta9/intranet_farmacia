<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('FacturaCompraDet', 'doctrine');

/**
 * BaseFacturaCompraDet
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $factura_compra_id
 * @property string $qty
 * @property string $qtyr
 * @property string $price_unit
 * @property string $price_unit_bs
 * @property string $price_calculado
 * @property string $price_unit_old
 * @property string $util_old
 * @property string $util_new
 * @property string $price_tot
 * @property integer $inventario_id
 * @property string $descripcion
 * @property string $exento
 * @property date $fecha_venc
 * @property string $lote
 * @property integer $tipo_precio
 * @property FacturaCompra $FacturaCompra
 * @property Inventario $Inventario
 * 
 * @method integer          getId()                Returns the current record's "id" value
 * @method integer          getFacturaCompraId()   Returns the current record's "factura_compra_id" value
 * @method string           getQty()               Returns the current record's "qty" value
 * @method string           getQtyr()              Returns the current record's "qtyr" value
 * @method string           getPriceUnit()         Returns the current record's "price_unit" value
 * @method string           getPriceUnitBs()       Returns the current record's "price_unit_bs" value
 * @method string           getPriceCalculado()    Returns the current record's "price_calculado" value
 * @method string           getPriceUnitOld()      Returns the current record's "price_unit_old" value
 * @method string           getUtilOld()           Returns the current record's "util_old" value
 * @method string           getUtilNew()           Returns the current record's "util_new" value
 * @method string           getPriceTot()          Returns the current record's "price_tot" value
 * @method integer          getInventarioId()      Returns the current record's "inventario_id" value
 * @method string           getDescripcion()       Returns the current record's "descripcion" value
 * @method string           getExento()            Returns the current record's "exento" value
 * @method date             getFechaVenc()         Returns the current record's "fecha_venc" value
 * @method string           getLote()              Returns the current record's "lote" value
 * @method integer          getTipoPrecio()        Returns the current record's "tipo_precio" value
 * @method FacturaCompra    getFacturaCompra()     Returns the current record's "FacturaCompra" value
 * @method Inventario       getInventario()        Returns the current record's "Inventario" value
 * @method FacturaCompraDet setId()                Sets the current record's "id" value
 * @method FacturaCompraDet setFacturaCompraId()   Sets the current record's "factura_compra_id" value
 * @method FacturaCompraDet setQty()               Sets the current record's "qty" value
 * @method FacturaCompraDet setQtyr()              Sets the current record's "qtyr" value
 * @method FacturaCompraDet setPriceUnit()         Sets the current record's "price_unit" value
 * @method FacturaCompraDet setPriceUnitBs()       Sets the current record's "price_unit_bs" value
 * @method FacturaCompraDet setPriceCalculado()    Sets the current record's "price_calculado" value
 * @method FacturaCompraDet setPriceUnitOld()      Sets the current record's "price_unit_old" value
 * @method FacturaCompraDet setUtilOld()           Sets the current record's "util_old" value
 * @method FacturaCompraDet setUtilNew()           Sets the current record's "util_new" value
 * @method FacturaCompraDet setPriceTot()          Sets the current record's "price_tot" value
 * @method FacturaCompraDet setInventarioId()      Sets the current record's "inventario_id" value
 * @method FacturaCompraDet setDescripcion()       Sets the current record's "descripcion" value
 * @method FacturaCompraDet setExento()            Sets the current record's "exento" value
 * @method FacturaCompraDet setFechaVenc()         Sets the current record's "fecha_venc" value
 * @method FacturaCompraDet setLote()              Sets the current record's "lote" value
 * @method FacturaCompraDet setTipoPrecio()        Sets the current record's "tipo_precio" value
 * @method FacturaCompraDet setFacturaCompra()     Sets the current record's "FacturaCompra" value
 * @method FacturaCompraDet setInventario()        Sets the current record's "Inventario" value
 * 
 * @package    ired.localhost
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseFacturaCompraDet extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('factura_compra_det');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('factura_compra_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('qty', 'string', 20, array(
             'type' => 'string',
             'notnull' => true,
             'default' => 1,
             'length' => 20,
             ));
        $this->hasColumn('qtyr', 'string', 20, array(
             'type' => 'string',
             'notnull' => true,
             'default' => 0,
             'length' => 20,
             ));
        $this->hasColumn('price_unit', 'string', 20, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 20,
             ));
        $this->hasColumn('price_unit_bs', 'string', 20, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 20,
             ));
        $this->hasColumn('price_calculado', 'string', 20, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 20,
             ));
        $this->hasColumn('price_unit_old', 'string', 20, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 20,
             ));
        $this->hasColumn('util_old', 'string', 20, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 20,
             ));
        $this->hasColumn('util_new', 'string', 20, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 20,
             ));
        $this->hasColumn('price_tot', 'string', 20, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 20,
             ));
        $this->hasColumn('inventario_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => false,
             'length' => 4,
             ));
        $this->hasColumn('descripcion', 'string', null, array(
             'type' => 'string',
             'notnull' => false,
             'length' => '',
             ));
        $this->hasColumn('exento', 'string', 20, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 20,
             ));
        $this->hasColumn('fecha_venc', 'date', 25, array(
             'type' => 'date',
             'notnull' => true,
             'length' => 25,
             ));
        $this->hasColumn('lote', 'string', 200, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 200,
             ));
        $this->hasColumn('tipo_precio', 'integer', 1, array(
             'type' => 'integer',
             'default' => 1,
             'unsigned' => true,
             'notnull' => true,
             'length' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('FacturaCompra', array(
             'local' => 'factura_compra_id',
             'foreign' => 'id'));

        $this->hasOne('Inventario', array(
             'local' => 'inventario_id',
             'foreign' => 'id'));
    }
}