<?php

/**
 * Inventario
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    ired.localhost
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Inventario extends BaseInventario
{
  public function getEstatus() {
    if($this->getActivo()==0) {
      return "DES-HABILITADO";
    } else {
      return "HABILITADO";
    }
  }

  public function getUrlImagen() {
    return $this["imagen"];
  }

  public function getSerialName() {
    return $this["sname"];
  }

  public function getEmpresaName() {
    return $this["ename"];
  }

  public function getCompany() {
    return $this["emin"];
  }

  public function getDepositoName() {
    return $this["idname"];
  }

  public function getProductoName() {
    return $this["pname"];
  }

  public function getLabName() {
    return $this["plname"];
  }

  public function getQty() {
    return $this->getCantidad();
  }
  
  public function getLimite() {
    return $this->getLimiteStock();
  }

  public function getCreatedByUser() {
      $user=Doctrine::getTable('SfGuardUser')->findOneBy('id',$this->getCreatedBy());
      return $user->getFirstName()." ".$user->getLastName()." (".$user->getUsername().")";
  }

  public function getUpdatedByUser() {
      $user=Doctrine::getTable('SfGuardUser')->findOneBy('id',$this->getUpdatedBy());
      return $user->getFirstName()." ".$user->getLastName()." (".$user->getUsername().")";
  }

  public function getCreatedAtTxt() {
    return format_datetime($this->getCreatedAt(), 'f', 'es_ES');
  }

  public function getUpdatedAtTxt() {
    return format_datetime($this->getUpdatedAt(), 'f', 'es_ES');
  }

  public function restarInventario($cant) {
    $desc="";
    $inventario = Doctrine_Core::getTable('Inventario')->findOneBy('id', $this->getId());
    $cant_inv=numero_cant($inventario->getQty())-numero_cant($cant);
    $invs = Doctrine_Core::getTable('InventarioDet')
      ->createQuery('a')
      ->Where('inventario_id=?', $this->getId())
      ->andWhere('cantidad>0')
      ->orderBy('fecha_venc ASC')
      ->execute();
    foreach ($invs as $inv) {
      $init_inv_qty=numero_cant($inv->getCantidad());
      $cant_det=$init_inv_qty-numero_cant($cant);
      if($cant_det>=0) {
        $inv->cantidad=$cant_det;
        $inv->save();
        $desc=$desc.$inv->getId()."|".$cant."|".$inv->getFechaVenc()."|".$inv->getLote().";";
        break;
      } else {
        $inv->cantidad=0;
        $inv->save();
        $desc=$desc.$inv->getId()."|".$init_inv_qty."|".$inv->getFechaVenc()."|".$inv->getLote().";";
        $cant=numero_cant($cant)-$init_inv_qty;
      }
    }
    $results = Doctrine_Query::create()
      ->select('SUM(CAST(id.cantidad AS SIGNED)) as qty')
      ->from('InventarioDet id')
      ->where('id.inventario_id = ?', $this->getId())
      ->execute();
    $cantidad=0;
    foreach ($results as $result) {
      $cantidad+=numero_cant($result["qty"]);
    }

    $inventario->cantidad=$cantidad;
    $inventario->save();

    return $desc;
  }

  public function sumarInventario($cant) {
    $inventario = Doctrine_Core::getTable('Inventario')->findOneBy('id', $this->getId());
    $cant_inv=numero_cant($inventario->getQty())+numero_cant($cant);
    $invs = Doctrine_Core::getTable('InventarioDet')
      ->createQuery('a')
      ->Where('inventario_id=?', $this->getId())
      ->orderBy('id DESC')
      ->limit(1)
      ->execute();
    foreach ($invs as $inv) {
      $init_inv_qty=numero_cant($inv->getCantidad());
      $inv->cantidad=($init_inv_qty+numero_cant($cant));
      $inv->save();
      break;
    }
    $inventario->cantidad=$cant_inv;
    $inventario->save();
  }

  public function sumarLote($cant, $fvenc, $lote) {
    $inventario = Doctrine_Core::getTable('Inventario')->findOneBy('id', $this->getId());
    $cant_inv=numero_cant($inventario->getQty())+numero_cant($cant);
    $inventario->cantidad=$cant_inv;
    $inventario->save();

    $dets = Doctrine_Core::getTable('InventarioDet')
      ->createQuery('a')
      ->Where('inventario_id=?', $this->getId())
      ->AndWhere('fecha_venc=?', $fvenc)
      ->AndWhere('lote=?', $lote)
      ->orderBy('id DESC')
      ->limit(1)
      ->execute();
    $i=0;
    foreach ($dets as $det) {
      $cant_det=numero_cant($det->getCantidad()+$cant);
      $det->cantidad=$cant_det;
      $det->save();
      $i++;
      break;
    }

    if($i==0) {
      $inv_det = new InventarioDet();
      $inv_det->inventario_id=$inventario->getId();
      $inv_det->fecha_venc=$fvenc;
      $inv_det->lote=$lote;
      $inv_det->cantidad=numero_cant($cant);
      $inv_det->save();
    }
  }

  public function restarLote($cant, $fvenc, $lote) {
    $inventario = Doctrine_Core::getTable('Inventario')->findOneBy('id', $this->getId());
    $cant_inv=numero_cant($inventario->getQty())-numero_cant($cant);
    $inventario->cantidad=$cant_inv;
    $inventario->save();

    $dets = Doctrine_Core::getTable('InventarioDet')
      ->createQuery('a')
      ->Where('inventario_id=?', $this->getId())
      ->AndWhere('fecha_venc=?', $fvenc)
      ->AndWhere('lote=?', $lote)
      ->orderBy('id DESC')
      ->limit(1)
      ->execute();
    foreach ($dets as $det) {
      $cant_det=numero_cant($det->getCantidad()-$cant);
      $det->cantidad=$cant_det;
      $det->save();
      break;
    }

    /*$results = Doctrine_Query::create()
      ->select('id.id as idid, id.cantidad as qty')
      ->from('InventarioDet id')
      ->where('id.inventario_id = ?', $this->getId())
      ->andWhere('id.cantidad > 0')
      ->orderBy('id.id ASC')
      ->execute();
    $cantidad=0;
    foreach ($results as $result) {
      $cantidad+=numero_cant($result["qty"]);
    }

    $inventario->cantidad=$cantidad;
    $inventario->save(); */
  }

  public function sumarAjuste($cant, $InvDetId) {
    $inventario = Doctrine_Core::getTable('Inventario')->findOneBy('id', $this->getId());
    $cant_inv=numero_cant($inventario->getQty())+numero_cant($cant);
    $inventario->cantidad=$cant_inv;
    $inventario->save();
    $dets = Doctrine_Core::getTable('InventarioDet')
      ->createQuery('a')
      ->Where('id=?', $InvDetId)
      ->orderBy('id DESC')
      ->limit(1)
      ->execute();
    foreach ($dets as $det) {
      $det->cantidad=numero_cant($det->getCantidad())+numero_cant($cant);
      $det->save();
      break;
    }
  }
  
  public function restarAjuste($cant, $InvDetId) {
    $inventario = Doctrine_Core::getTable('Inventario')->findOneBy('id', $this->getId());
    $cant_inv=numero_cant($inventario->getQty())-numero_cant($cant);
    $inventario->cantidad=$cant_inv;
    $inventario->save();
    $dets = Doctrine_Core::getTable('InventarioDet')
      ->createQuery('a')
      ->Where('id=?', $InvDetId)
      ->orderBy('id DESC')
      ->limit(1)
      ->execute();
    foreach ($dets as $det) {
      $det->cantidad=numero_cant($det->getCantidad())-numero_cant($cant);
      $det->save();
      break;
    }
  }

  public function sumarDevolucion($datos) {
    $items = explode(';', $datos);
    foreach ($items as $item) {
      if(strlen($item)>0) {
        list($InvDetId, $qty, $fvenc, $lote) = explode ("|", $item);
        $this->sumarAjuste($qty, $InvDetId);
      }
    }
  }

  public function restarDevolucion($datos) {
    $items = explode(';', $datos);
    foreach ($items as $item) {
      if(strlen($item)>0) {
        list($InvDetId, $qty, $fvenc, $lote) = explode ("|", $item);
        $this->restarAjuste($qty, $InvDetId);
      }
    }
  }

  public function sumarAjusteFull($cant, $InvDetId, $fvenc, $lote) {
    $inventario = Doctrine_Core::getTable('Inventario')->findOneBy('id', $this->getId());
    $cant_inv=numero_cant($inventario->getQty())+numero_cant($cant);
    $inventario->cantidad=$cant_inv;
    $inventario->save();
    $dets = Doctrine_Core::getTable('InventarioDet')
      ->createQuery('a')
      ->Where('id=?', $InvDetId)
      ->orderBy('id DESC')
      ->limit(1)
      ->execute();
    $desc="";
    foreach ($dets as $det) {
      $desc=$desc.$det->getCantidad()."|".$det->getFechaVenc()."|".$det->getLote();
      $det->cantidad=numero_cant($det->getCantidad())+numero_cant($cant);
      $det->fecha_venc=$fvenc;
      $det->lote=$lote;
      $det->save();
      break;
    }
    return $desc;
  }
  
  public function restarAjusteFull($cant, $InvDetId, $fvenc, $lote) {
    $inventario = Doctrine_Core::getTable('Inventario')->findOneBy('id', $this->getId());
    $cant_inv=numero_cant($inventario->getQty())-numero_cant($cant);
    $inventario->cantidad=$cant_inv;
    $inventario->save();
    $dets = Doctrine_Core::getTable('InventarioDet')
      ->createQuery('a')
      ->Where('id=?', $InvDetId)
      ->orderBy('id DESC')
      ->limit(1)
      ->execute();
    $desc="";
    foreach ($dets as $det) {
      $desc=$desc.$det->getCantidad()."|".$det->getFechaVenc()."|".$det->getLote();
      $det->cantidad=numero_cant($det->getCantidad())-numero_cant($cant);
      $det->fecha_venc=$fvenc;
      $det->lote=$lote;
      $det->save();
      break;
    }
    return $desc;
  }
}

function numero_cant($str) {
  $stripped = str_replace(' ', '', $str);
  $number = str_replace(',', '', $stripped);
  return floatval($number);
}